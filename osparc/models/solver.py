# coding: utf-8

"""
    Public API Server

    **osparc-simcore Public RESTful API Specifications** ## Python Library - Check the [documentation](https://itisfoundation.github.io/osparc-simcore-python-client) - Quick install: ``pip install git+https://github.com/ITISFoundation/osparc-simcore-python-client.git``   # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc.configuration import Configuration


class Solver(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'name': 'str',
        'version': 'str',
        'version_aliases': 'list[str]',
        'title': 'str',
        'description': 'str',
        'maintainer': 'str',
        'released': 'datetime',
        'solver_url': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'version': 'version',
        'version_aliases': 'version_aliases',
        'title': 'title',
        'description': 'description',
        'maintainer': 'maintainer',
        'released': 'released',
        'solver_url': 'solver_url'
    }

    def __init__(self, uuid=None, name=None, version=None, version_aliases=[], title=None, description=None, maintainer=None, released=None, solver_url=None, local_vars_configuration=None):  # noqa: E501
        """Solver - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._name = None
        self._version = None
        self._version_aliases = None
        self._title = None
        self._description = None
        self._maintainer = None
        self._released = None
        self._solver_url = None
        self.discriminator = None

        self.uuid = uuid
        self.name = name
        self.version = version
        if version_aliases is not None:
            self.version_aliases = version_aliases
        self.title = title
        if description is not None:
            self.description = description
        self.maintainer = maintainer
        if released is not None:
            self.released = released
        self.solver_url = solver_url

    @property
    def uuid(self):
        """Gets the uuid of this Solver.  # noqa: E501

        Same as the solver's image sha256  # noqa: E501

        :return: The uuid of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Solver.

        Same as the solver's image sha256  # noqa: E501

        :param uuid: The uuid of this Solver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Solver.  # noqa: E501

        Image name including namespace  # noqa: E501

        :return: The name of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Solver.

        Image name including namespace  # noqa: E501

        :param name: The name of this Solver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this Solver.  # noqa: E501


        :return: The version of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Solver.


        :param version: The version of this Solver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def version_aliases(self):
        """Gets the version_aliases of this Solver.  # noqa: E501


        :return: The version_aliases of this Solver.  # noqa: E501
        :rtype: list[str]
        """
        return self._version_aliases

    @version_aliases.setter
    def version_aliases(self, version_aliases):
        """Sets the version_aliases of this Solver.


        :param version_aliases: The version_aliases of this Solver.  # noqa: E501
        :type: list[str]
        """

        self._version_aliases = version_aliases

    @property
    def title(self):
        """Gets the title of this Solver.  # noqa: E501


        :return: The title of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Solver.


        :param title: The title of this Solver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Solver.  # noqa: E501


        :return: The description of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Solver.


        :param description: The description of this Solver.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def maintainer(self):
        """Gets the maintainer of this Solver.  # noqa: E501


        :return: The maintainer of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this Solver.


        :param maintainer: The maintainer of this Solver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and maintainer is None:  # noqa: E501
            raise ValueError("Invalid value for `maintainer`, must not be `None`")  # noqa: E501

        self._maintainer = maintainer

    @property
    def released(self):
        """Gets the released of this Solver.  # noqa: E501


        :return: The released of this Solver.  # noqa: E501
        :rtype: datetime
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this Solver.


        :param released: The released of this Solver.  # noqa: E501
        :type: datetime
        """

        self._released = released

    @property
    def solver_url(self):
        """Gets the solver_url of this Solver.  # noqa: E501


        :return: The solver_url of this Solver.  # noqa: E501
        :rtype: str
        """
        return self._solver_url

    @solver_url.setter
    def solver_url(self, solver_url):
        """Sets the solver_url of this Solver.


        :param solver_url: The solver_url of this Solver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and solver_url is None:  # noqa: E501
            raise ValueError("Invalid value for `solver_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                solver_url is not None and len(solver_url) > 2083):
            raise ValueError("Invalid value for `solver_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                solver_url is not None and len(solver_url) < 1):
            raise ValueError("Invalid value for `solver_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._solver_url = solver_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Solver):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Solver):
            return True

        return self.to_dict() != other.to_dict()
