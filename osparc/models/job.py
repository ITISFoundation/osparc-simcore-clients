# coding: utf-8

"""
    Public API Server

    **osparc-simcore Public RESTful API Specifications** ## Python Library - Check the [documentation](https://itisfoundation.github.io/osparc-simcore-python-client) - Quick install: ``pip install git+https://github.com/ITISFoundation/osparc-simcore-python-client.git``   # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_id': 'str',
        'inputs_sha': 'str',
        'solver_id': 'str',
        'solver_url': 'str',
        'inspect_url': 'str',
        'outputs_url': 'str'
    }

    attribute_map = {
        'job_id': 'job_id',
        'inputs_sha': 'inputs_sha',
        'solver_id': 'solver_id',
        'solver_url': 'solver_url',
        'inspect_url': 'inspect_url',
        'outputs_url': 'outputs_url'
    }

    def __init__(self, job_id=None, inputs_sha=None, solver_id=None, solver_url=None, inspect_url=None, outputs_url=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._inputs_sha = None
        self._solver_id = None
        self._solver_url = None
        self._inspect_url = None
        self._outputs_url = None
        self.discriminator = None

        self.job_id = job_id
        self.inputs_sha = inputs_sha
        self.solver_id = solver_id
        self.solver_url = solver_url
        self.inspect_url = inspect_url
        self.outputs_url = outputs_url

    @property
    def job_id(self):
        """Gets the job_id of this Job.  # noqa: E501


        :return: The job_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Job.


        :param job_id: The job_id of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def inputs_sha(self):
        """Gets the inputs_sha of this Job.  # noqa: E501


        :return: The inputs_sha of this Job.  # noqa: E501
        :rtype: str
        """
        return self._inputs_sha

    @inputs_sha.setter
    def inputs_sha(self, inputs_sha):
        """Sets the inputs_sha of this Job.


        :param inputs_sha: The inputs_sha of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inputs_sha is None:  # noqa: E501
            raise ValueError("Invalid value for `inputs_sha`, must not be `None`")  # noqa: E501

        self._inputs_sha = inputs_sha

    @property
    def solver_id(self):
        """Gets the solver_id of this Job.  # noqa: E501


        :return: The solver_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._solver_id

    @solver_id.setter
    def solver_id(self, solver_id):
        """Sets the solver_id of this Job.


        :param solver_id: The solver_id of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and solver_id is None:  # noqa: E501
            raise ValueError("Invalid value for `solver_id`, must not be `None`")  # noqa: E501

        self._solver_id = solver_id

    @property
    def solver_url(self):
        """Gets the solver_url of this Job.  # noqa: E501


        :return: The solver_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._solver_url

    @solver_url.setter
    def solver_url(self, solver_url):
        """Sets the solver_url of this Job.


        :param solver_url: The solver_url of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and solver_url is None:  # noqa: E501
            raise ValueError("Invalid value for `solver_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                solver_url is not None and len(solver_url) > 2083):
            raise ValueError("Invalid value for `solver_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                solver_url is not None and len(solver_url) < 1):
            raise ValueError("Invalid value for `solver_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._solver_url = solver_url

    @property
    def inspect_url(self):
        """Gets the inspect_url of this Job.  # noqa: E501


        :return: The inspect_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._inspect_url

    @inspect_url.setter
    def inspect_url(self, inspect_url):
        """Sets the inspect_url of this Job.


        :param inspect_url: The inspect_url of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inspect_url is None:  # noqa: E501
            raise ValueError("Invalid value for `inspect_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                inspect_url is not None and len(inspect_url) > 2083):
            raise ValueError("Invalid value for `inspect_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                inspect_url is not None and len(inspect_url) < 1):
            raise ValueError("Invalid value for `inspect_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._inspect_url = inspect_url

    @property
    def outputs_url(self):
        """Gets the outputs_url of this Job.  # noqa: E501


        :return: The outputs_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._outputs_url

    @outputs_url.setter
    def outputs_url(self, outputs_url):
        """Sets the outputs_url of this Job.


        :param outputs_url: The outputs_url of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and outputs_url is None:  # noqa: E501
            raise ValueError("Invalid value for `outputs_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                outputs_url is not None and len(outputs_url) > 2083):
            raise ValueError("Invalid value for `outputs_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                outputs_url is not None and len(outputs_url) < 1):
            raise ValueError("Invalid value for `outputs_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._outputs_url = outputs_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
