# coding: utf-8

"""
    Public API Server

    **osparc-simcore Public RESTful API Specifications** ## Python Library - Check the [documentation](https://itisfoundation.github.io/osparc-simcore-python-client) - Quick install: ``pip install git+https://github.com/ITISFoundation/osparc-simcore-python-client.git``   # noqa: E501

    The version of the OpenAPI document: 0.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc.configuration import Configuration


class JobOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_type': 'str',
        'key': 'str',
        'title': 'str',
        'status': 'TaskStates',
        'value': 'AnyOfstringintegernumber',
        'value_url': 'str'
    }

    attribute_map = {
        'content_type': 'content_type',
        'key': 'key',
        'title': 'title',
        'status': 'status',
        'value': 'value',
        'value_url': 'value_url'
    }

    def __init__(self, content_type=None, key=None, title=None, status=None, value=None, value_url=None, local_vars_configuration=None):  # noqa: E501
        """JobOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_type = None
        self._key = None
        self._title = None
        self._status = None
        self._value = None
        self._value_url = None
        self.discriminator = None

        self.content_type = content_type
        self.key = key
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status
        if value is not None:
            self.value = value
        if value_url is not None:
            self.value_url = value_url

    @property
    def content_type(self):
        """Gets the content_type of this JobOutput.  # noqa: E501


        :return: The content_type of this JobOutput.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this JobOutput.


        :param content_type: The content_type of this JobOutput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content_type is None:  # noqa: E501
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def key(self):
        """Gets the key of this JobOutput.  # noqa: E501


        :return: The key of this JobOutput.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this JobOutput.


        :param key: The key of this JobOutput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) < 3):
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `3`")  # noqa: E501

        self._key = key

    @property
    def title(self):
        """Gets the title of this JobOutput.  # noqa: E501


        :return: The title of this JobOutput.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JobOutput.


        :param title: The title of this JobOutput.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status(self):
        """Gets the status of this JobOutput.  # noqa: E501


        :return: The status of this JobOutput.  # noqa: E501
        :rtype: TaskStates
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobOutput.


        :param status: The status of this JobOutput.  # noqa: E501
        :type: TaskStates
        """

        self._status = status

    @property
    def value(self):
        """Gets the value of this JobOutput.  # noqa: E501


        :return: The value of this JobOutput.  # noqa: E501
        :rtype: AnyOfstringintegernumber
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this JobOutput.


        :param value: The value of this JobOutput.  # noqa: E501
        :type: AnyOfstringintegernumber
        """

        self._value = value

    @property
    def value_url(self):
        """Gets the value_url of this JobOutput.  # noqa: E501


        :return: The value_url of this JobOutput.  # noqa: E501
        :rtype: str
        """
        return self._value_url

    @value_url.setter
    def value_url(self, value_url):
        """Sets the value_url of this JobOutput.


        :param value_url: The value_url of this JobOutput.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                value_url is not None and len(value_url) > 2083):
            raise ValueError("Invalid value for `value_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                value_url is not None and len(value_url) < 1):
            raise ValueError("Invalid value for `value_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._value_url = value_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobOutput):
            return True

        return self.to_dict() != other.to_dict()
