#!/bin/bash

set -o errexit  # abort on nonzero exitstatus
set -o nounset  # abort on unbound variable
set -o pipefail # don't hide errors within pipes

usage() { echo "$0 options (e.g. '-r ITISFoundation/osparc-simcore -b master'):" && grep " .)\ #" $0; exit 0; }
[ $# -eq 0 ] && usage
while getopts ":r:b:h" arg; do
  case $arg in
    r) # Define which repository to pick the client from
      CLIENT_REPO=${OPTARG}
      ;;
    b) # Define which branch to pick the client from
      CLIENT_BRANCH=${OPTARG}
      ;;
    h) # Display help.
      usage
      exit 0
      ;;
  esac
done

# sanity check inputs
if [ ! -v CLIENT_REPO ] || [ ! -v CLIENT_BRANCH ]; then
    echo "Both repo and branch must be passed as arguments"
    exit 1
fi
CLIENT_WORKFLOW=publish-and-test-python-client
SCRIPTS_DIR=$(dirname "$0")
echo "Using CLIENT_REPO=${CLIENT_REPO}, CLIENT_BRANCH=${CLIENT_BRANCH}, CLIENT_WORKFLOW=${CLIENT_WORKFLOW}"

run_id=$(bash ${SCRIPTS_DIR}/gh.bash run list --repo=${CLIENT_REPO} --branch=${CLIENT_BRANCH} --workflow=${CLIENT_WORKFLOW} --limit=1 --json=databaseId --jq=.[].databaseId)
echo "Run id for latest client generated by '${CLIENT_WORKFLOW}' on branch '${CLIENT_BRANCH}' in repo '${CLIENT_REPO}': ${run_id}"
bash ${SCRIPTS_DIR}/gh.bash run download ${run_id} --repo=${CLIENT_REPO}
osparc_wheel=$(ls ./osparc_python_wheels/osparc-*.whl)
python -m pip install ${osparc_wheel} --find-links=./osparc_python_wheels --force-reinstall
rm -rf ./osparc_python_wheels
